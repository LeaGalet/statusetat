// Code generated by counterfeiter. DO NOT EDIT.
package emailfakes

import (
	"sync"

	"github.com/orange-cloudfoundry/statusetat/v2/notifiers/email"
	gomail "gopkg.in/gomail.v2"
)

type FakeEmailDialer struct {
	DialAndSendStub        func(...*gomail.Message) error
	dialAndSendMutex       sync.RWMutex
	dialAndSendArgsForCall []struct {
		arg1 []*gomail.Message
	}
	dialAndSendReturns struct {
		result1 error
	}
	dialAndSendReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEmailDialer) DialAndSend(arg1 ...*gomail.Message) error {
	fake.dialAndSendMutex.Lock()
	ret, specificReturn := fake.dialAndSendReturnsOnCall[len(fake.dialAndSendArgsForCall)]
	fake.dialAndSendArgsForCall = append(fake.dialAndSendArgsForCall, struct {
		arg1 []*gomail.Message
	}{arg1})
	fake.recordInvocation("DialAndSend", []interface{}{arg1})
	fake.dialAndSendMutex.Unlock()
	if fake.DialAndSendStub != nil {
		return fake.DialAndSendStub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.dialAndSendReturns
	return fakeReturns.result1
}

func (fake *FakeEmailDialer) DialAndSendCallCount() int {
	fake.dialAndSendMutex.RLock()
	defer fake.dialAndSendMutex.RUnlock()
	return len(fake.dialAndSendArgsForCall)
}

func (fake *FakeEmailDialer) DialAndSendCalls(stub func(...*gomail.Message) error) {
	fake.dialAndSendMutex.Lock()
	defer fake.dialAndSendMutex.Unlock()
	fake.DialAndSendStub = stub
}

func (fake *FakeEmailDialer) DialAndSendArgsForCall(i int) []*gomail.Message {
	fake.dialAndSendMutex.RLock()
	defer fake.dialAndSendMutex.RUnlock()
	argsForCall := fake.dialAndSendArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEmailDialer) DialAndSendReturns(result1 error) {
	fake.dialAndSendMutex.Lock()
	defer fake.dialAndSendMutex.Unlock()
	fake.DialAndSendStub = nil
	fake.dialAndSendReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEmailDialer) DialAndSendReturnsOnCall(i int, result1 error) {
	fake.dialAndSendMutex.Lock()
	defer fake.dialAndSendMutex.Unlock()
	fake.DialAndSendStub = nil
	if fake.dialAndSendReturnsOnCall == nil {
		fake.dialAndSendReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.dialAndSendReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEmailDialer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dialAndSendMutex.RLock()
	defer fake.dialAndSendMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEmailDialer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ email.EmailDialer = new(FakeEmailDialer)
