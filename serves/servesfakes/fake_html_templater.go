// Code generated by counterfeiter. DO NOT EDIT.
package servesfakes

import (
	"io"
	"sync"

	"github.com/orange-cloudfoundry/statusetat/v2/serves"
)

type FakeHtmlTemplater struct {
	ExecuteTemplateStub        func(io.Writer, string, interface{}) error
	executeTemplateMutex       sync.RWMutex
	executeTemplateArgsForCall []struct {
		arg1 io.Writer
		arg2 string
		arg3 interface{}
	}
	executeTemplateReturns struct {
		result1 error
	}
	executeTemplateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHtmlTemplater) ExecuteTemplate(arg1 io.Writer, arg2 string, arg3 interface{}) error {
	fake.executeTemplateMutex.Lock()
	ret, specificReturn := fake.executeTemplateReturnsOnCall[len(fake.executeTemplateArgsForCall)]
	fake.executeTemplateArgsForCall = append(fake.executeTemplateArgsForCall, struct {
		arg1 io.Writer
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	fake.recordInvocation("ExecuteTemplate", []interface{}{arg1, arg2, arg3})
	fake.executeTemplateMutex.Unlock()
	if fake.ExecuteTemplateStub != nil {
		return fake.ExecuteTemplateStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.executeTemplateReturns
	return fakeReturns.result1
}

func (fake *FakeHtmlTemplater) ExecuteTemplateCallCount() int {
	fake.executeTemplateMutex.RLock()
	defer fake.executeTemplateMutex.RUnlock()
	return len(fake.executeTemplateArgsForCall)
}

func (fake *FakeHtmlTemplater) ExecuteTemplateCalls(stub func(io.Writer, string, interface{}) error) {
	fake.executeTemplateMutex.Lock()
	defer fake.executeTemplateMutex.Unlock()
	fake.ExecuteTemplateStub = stub
}

func (fake *FakeHtmlTemplater) ExecuteTemplateArgsForCall(i int) (io.Writer, string, interface{}) {
	fake.executeTemplateMutex.RLock()
	defer fake.executeTemplateMutex.RUnlock()
	argsForCall := fake.executeTemplateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHtmlTemplater) ExecuteTemplateReturns(result1 error) {
	fake.executeTemplateMutex.Lock()
	defer fake.executeTemplateMutex.Unlock()
	fake.ExecuteTemplateStub = nil
	fake.executeTemplateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHtmlTemplater) ExecuteTemplateReturnsOnCall(i int, result1 error) {
	fake.executeTemplateMutex.Lock()
	defer fake.executeTemplateMutex.Unlock()
	fake.ExecuteTemplateStub = nil
	if fake.executeTemplateReturnsOnCall == nil {
		fake.executeTemplateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.executeTemplateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHtmlTemplater) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeTemplateMutex.RLock()
	defer fake.executeTemplateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHtmlTemplater) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ serves.HtmlTemplater = new(FakeHtmlTemplater)
